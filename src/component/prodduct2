import React, { useEffect, useState } from 'react';
import axios from 'axios';

const prodduct2 = () => {
    const [products, setProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [sortOrder, setSortOrder] = useState('asc'); // 'asc' or 'desc'
    const [filterCategory, setFilterCategory] = useState('');

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                const response = await axios.get('http://localhost:9797/api/products');
                setProducts(response.data);
                setFilteredProducts(response.data); // Initialize with all products
            } catch (error) {
                console.error("Error fetching products:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchProducts();
    }, []);

    useEffect(() => {
        // Filter products based on the selected category
        const filterProducts = () => {
            let newFilteredProducts = [...products];
            if (filterCategory) {
                newFilteredProducts = newFilteredProducts.filter(product => product.category === filterCategory);
            }
            // Sort products
            newFilteredProducts.sort((a, b) => {
                if (sortOrder === 'asc') {
                    return a.price - b.price; // Assuming products have a price property
                } else {
                    return b.price - a.price;
                }
            });
            setFilteredProducts(newFilteredProducts);
        };

        filterProducts();
    }, [products, sortOrder, filterCategory]);

    if (loading) {
        return <div>Loading...</div>;
    }

    return (
        <div>
            <h1>Products</h1>
            <div>
                <label>
                    Filter by category:
                    <select onChange={(e) => setFilterCategory(e.target.value)}>
                        <option value="">All</option>
                        <option value="Category1">Category 1</option>
                        <option value="Category2">Category 2</option>
                        {/* Add more categories as needed */}
                    </select>
                </label>

                <label>
                    Sort by price:
                    <select onChange={(e) => setSortOrder(e.target.value)}>
                        <option value="asc">Low to High</option>
                        <option value="desc">High to Low</option>
                    </select>
                </label>
            </div>

            <ul>
                {filteredProducts.map(product => (
                    <li key={product.id}>
                        {product.name} - ${product.price}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default ProductsPage;
